# Reusable workflow for test-build-deploy on AWS ECS

############   MERGE ALWAYS TO MASTER  #############

name: Test, Build and Deploy

on:
  workflow_call:
    inputs:
      branch:
        description: dev | qa | prod
        required: true
        type: string
      environment:
        description: develop | release | production
        required: true
        type: string

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: todoapp-api
  ECS_SERVICE: todoapp-api-service-${{inputs.branch}}
  ECS_CLUSTER: todoapp-api-cluster-${{inputs.branch}}
  ECS_TASK_DEFINITION: .aws/task-definition-${{inputs.branch}}.json
  CONTAINER_NAME: todoapp-api-container-${{inputs.branch}}

jobs:
  test:
    name: Lint Code Base
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Lint Code Base
        uses: github/super-linter@v3
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: master
          GITHUB_TOKEN: 08b0197995350fb65c4ee4920bec50cbc30d38ca

  deploy:
    name: Deploy
    needs: test
    runs-on: ubuntu-latest
    environment: ${{inputs.environment}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Checkout latest code
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: Build Maven and package as JAR
        run: mvn -B package -DskipTests --file pom.xml
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{inputs.environment}}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
